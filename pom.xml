<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>edu.cwru.sepia</groupId>
	<artifactId>Sepia</artifactId>
	<packaging>jar</packaging>
	<version>0.10.1</version>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<!--
		TODO: avoid third-party repos
	-->
	<repositories>
		<repository>
			<id>clojars</id>
			<name>clojars.org</name>
			<url>https://clojars.org/repo/</url>
		</repository>
	</repositories>

	<build>
		<pluginManagement>
			<plugins>
				<!--
					Set target Java version
				-->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<source>1.8</source>
						<target>1.8</target>
					</configuration>
				</plugin>

				<!--
					Generate Java XML bindings from schema
				-->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>jaxb2-maven-plugin</artifactId>
					<version>2.5.0</version>
				</plugin>

				<!--
					Ignore new Java 8 doclint standards

					TODO: fix javadoc
				-->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<configuration>
						<doclint>none</doclint>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jaxb2-maven-plugin</artifactId>

				<!--
					Workaround: generate XML bindings separately

					Both state.xsd and config.xsd leave targetNamespace
					unspecified, so xjc creates bindings that map to
					the root namespace. A unique namespace should be
					defined for each schema definition. As a workaround,
					a separate xjc is executed for each schema
					definition.

					TODO: map schema definitions to specific namespaces,
					      and remove this workaround
				-->
				<executions>
					<execution>
						<id>xjc-state</id>
						<goals>
							<goal>xjc</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/generated-sources/jaxb-state</outputDirectory>
							<sources>
								<source>src/main/xsd/state.xsd</source>
							</sources>
							<xjbSources>
								<xjbSource>src/main/xjb/state-binding.xjb</xjbSource>
							</xjbSources>
						</configuration>
					</execution>
					<execution>
						<id>xjc-config</id>
						<goals>
							<goal>xjc</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/generated-sources/jaxb-config</outputDirectory>
							<sources>
								<source>src/main/xsd/config.xsd</source>
							</sources>
							<xjbSources>
								<xjbSource>src/main/xjb/config-binding.xjb</xjbSource>
							</xjbSources>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.3.1</version>
		</dependency>

		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20131018</version>
		</dependency>

		<!--
			TODO: avoid third-party repo and move to submodule
		-->
		<dependency>
			<groupId>kephale</groupId>
			<artifactId>matlabcontrol</artifactId>
			<version>4.1.0</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.jaxb</groupId>
			<artifactId>jaxb-runtime</artifactId>
			<version>2.3.2</version>
		</dependency>
	</dependencies>

</project>
